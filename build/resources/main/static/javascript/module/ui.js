// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('ui', []).filter('notIn', function() {
    return function(input, arr, prop) {
      var arrNames;
      if (angular.isUndefined(input) || angular.isUndefined(arr)) {
        return input;
      } else if (prop) {
        arrNames = arr.map(function(item) {
          return item[prop];
        });
        return input.filter(function(item) {
          return arrNames.indexOf(item[prop]) < 0;
        });
      } else {
        return input.filter(function(item) {
          return arr.indexOf(item) < 0;
        });
      }
    };
  }).directive('itemChooser', [
    function() {
      return {
        restrict: 'E',
        scope: {
          itemTitle: '@',
          items: '=',
          selectedItems: '=output'
        },
        templateUrl: 'res/template/chooser.tpl.html',
        controller: function($scope) {
          $scope.addItem = function(item) {
            return $scope.selectedItems.push(item);
          };
          return $scope.removeItem = function(item) {
            var index;
            index = $scope.selectedItems.indexOf(item);
            return $scope.selectedItems.splice(index, 1);
          };
        }
      };
    }
  ]).directive('chooseList', [
    function() {
      return {
        restrict: 'E',
        scope: {
          itemTitle: '@',
          items: '=',
          selectedItems: '=output'
        },
        templateUrl: 'res/template/choose-list.tpl.html',
        controller: function($scope) {
          $scope.addItem = function(item) {
            return $scope.selectedItems.push(item);
          };
          $scope.removeItem = function(item) {
            var index;
            index = $scope.selectedItems.indexOf(item);
            return $scope.selectedItems.splice(index, 1);
          };
          return $scope.hasLeft = function() {
            return !$scope['items'].every(function(item) {
              return $scope['selectedItems'].indexOf(item) >= 0;
            });
          };
        }
      };
    }
  ]).directive('chooseListGroup', [
    function() {
      return {
        restrict: 'E',
        scope: {
          itemTitle: '@',
          groups: '=',
          output: '=output'
        },
        templateUrl: 'res/template/choose-list-group.tpl.html'
      };
    }
  ]).directive('choose', [
    function() {
      return {
        restrict: 'E',
        scope: {
          itemTitle: '@',
          groups: '=',
          output: '=output'
        },
        templateUrl: 'res/template/choose.tpl.html',
        controller: function($scope) {
          return $scope.removeItem = function(item) {
            var index;
            index = $scope.output.indexOf(item);
            return $scope.output.splice(index, 1);
          };
        }
      };
    }
  ]).directive('distributeCard', [
    function() {
      return {
        restrict: 'E',
        scope: {
          task: '=',
          retry: '&',
          cancel: '&'
        },
        templateUrl: 'res/template/distribute-card.tpl.html',
        controller: function($scope) {
          var status, statusMapper, typeMapper;
          typeMapper = {
            POLICY_DISTRIBUTION: {
              style: 'bg-info',
              text: '策略下发'
            },
            APP_DISTRIBUTION: {
              style: 'bg-success',
              text: '应用下发'
            },
            APP_UNINSTALL: {
              style: 'bg-waring',
              text: '应用卸载'
            }
          };
          statusMapper = {
            running: {
              style: 'label-info',
              text: '运行中'
            },
            success: {
              style: 'label-success',
              text: '成功完成'
            },
            fail: {
              style: 'label-warning',
              text: '部分完成'
            }
          };
          status = $scope.task.running ? 'running' : !$scope.task.running && $scope.task.success ? 'success' : !$scope.task.running && !$scope.task.success ? 'fail' : void 0;
          $scope.typeInfo = typeMapper[$scope.task.type];
          $scope.statusInfo = statusMapper[status];
          return $scope.needRetry = function() {
            return !$scope.task.running && !$scope.task.success;
          };
        }
      };
    }
  ]).directive('taskDetail', [
    function() {
      return {
        restrict: 'E',
        scope: {
          taskId: '='
        },
        templateUrl: 'res/template/task-detail.tpl.html',
        controller: [
          '$scope', 'DistributionService', function($scope, DistributionService) {
            return $scope.$watch('taskId', (function(newVal, oldVal) {
              if ($scope.taskId) {
                return DistributionService.detail($scope.taskId).success(function(data) {
                  return $scope.task = data;
                });
              }
            }), false);
          }
        ]
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=ui.js.map
