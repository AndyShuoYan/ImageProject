// Generated by CoffeeScript 1.9.3
(function() {
  var getCookie;

  angular.module('common', ['ngRoute', 'ngMessages', 'datatables', 'ui.utils', 'ui.uploader', 'ui.bootstrap', 'blueimp.fileupload']).config([
    '$httpProvider', function($httpProvider) {
      var header, token;
      token = $("meta[name='_csrf']").attr("content");
      header = $("meta[name='_csrf_header']").attr("content");
      $httpProvider.defaults.xsrfHeaderName = header;
      return $.ajaxSetup({
        beforeSend: function(xhr) {
          return xhr.setRequestHeader(header, token);
        }
      });
    }
  ]).run([
    'DTDefaultOptions', function(DTDefaultOptions) {
      return DTDefaultOptions.setLanguage({
        "sProcessing": "处理中...",
        "sLengthMenu": "_MENU_ 记录/页",
        "sZeroRecords": "没有匹配的记录",
        "sInfo": "显示第 _START_ 至 _END_ 项记录，共 _TOTAL_ 项",
        "sInfoEmpty": "显示第 0 至 0 项记录，共 0 项",
        "sInfoFiltered": "(由 _MAX_ 项记录过滤)",
        "sInfoPostFix": "",
        "sSearch": "过滤:",
        "sUrl": "",
        "sEmptyTable": "暂无输据",
        "oPaginate": {
          "sFirst": "首页",
          "sPrevious": "上页",
          "sNext": "下页",
          "sLast": "末页"
        }
      });
    }
  ]).controller('UploadController', [
    '$scope', function($scope) {
      $scope.options = {
        url: 'upload',
        autoUpload: true,
        done: function(e, data) {
          $scope.uploaded = true;
          $scope.localFile = data.files[0];
          return $scope.uploadedFile = data.result.files[0];
        }
      };
      $scope.uploaded = false;
      return $scope.queue = [];
    }
  ]).service('FormService', [
    function() {
      return {
        init: function(scope) {
          instance.scope = scope;
          return scope.FormService = instance;
        },
        getFieldClass: function(field) {
          if (field.$dirty && field.$invalid) {
            return 'has-error';
          } else if (field.$dirty && field.$valid) {
            return 'has-success';
          }
        },
        getFeedbackClass: function(field) {
          if (field.$dirty && field.$invalid) {
            return 'glyphicon-remove';
          } else if (field.$dirty && field.$valid) {
            return 'glyphicon-ok';
          }
        },
        shouldShowError: function(field) {
          return field.$dirty && field.$invalid;
        },
        canSave: function(form) {
          return form.$valid;
        }
      };
    }
  ]).service('AlertService', [
    '$timeout', '$location', function($timeout, $location) {
      return {
        alerts: [],
        init: function(scope) {
          return scope.AlertService = this;
        },
        dismiss: function(index) {
          return this.alerts.splice(index, 1);
        },
        show: function(success, message, time) {
          time = time != null ? time : 3000;
          this.alerts.push({
            type: (success ? 'success' : 'danger'),
            msg: message
          });
          return $timeout(((function(_this) {
            return function() {
              return _this.dismiss(0);
            };
          })(this)), time);
        },
        defaultHandle: function(promise, backAfterSuccess, successMessage, errorMessage) {
          var goBack;
          goBack = function() {
            var arr;
            arr = $location.path().split('/');
            arr.pop();
            return $location.path(arr.join('/'));
          };
          return promise.success((function(_this) {
            return function(data, status, headers, config) {
              _this.show(data.success, data.msg ? data.msg : successMessage);
              if (backAfterSuccess && data.success) {
                return goBack();
              }
            };
          })(this)).error((function(_this) {
            return function(data, status, headers, config) {
              return _this.show(false, data != null ? data : errorMessage);
            };
          })(this));
        }
      };
    }
  ]).service('MyDTColumnBuilder', [
    'DTColumnBuilder', function(DTColumnBuilder) {
      return {
        newColumn: function(name, title) {
          return DTColumnBuilder.newColumn(name).withTitle(title).withOption('name', name);
        }
      };
    }
  ]).service('DataTableService', [
    'DTColumnBuilder', 'DTOptionsBuilder', 'DTInstances', '$compile', '$timeout', '$filter', 'AlertService', function(DTColumnBuilder, DTOptionsBuilder, DTInstances, $compile, $timeout, $filter, AlertService) {
      var DtTable, compile;
      compile = function(e, scope) {
        return $compile(angular.element(e).contents())(scope);
      };
      DtTable = (function() {
        function DtTable(dtInstance1) {
          this.dtInstance = dtInstance1;
          this.selected = {};
          this.selectAll = false;
        }

        DtTable.prototype.init = function(instanceName, dtOptions, dtColumns, scope) {
          var checkableColumn, titleHtml;
          dtOptions.createdRow = (function(_this) {
            return function(row, data, dataIndex) {
              compile(row, scope);
              return _this.selected[data['DT_RowId']] = _this.selectAll;
            };
          })(this);
          dtOptions.headerCallback = function(thead) {
            compile(thead, scope);
            return delete dtOptions['headerCallback'];
          };
          titleHtml = "<input type='checkbox' ng-model='" + instanceName + ".selectAll' ng-change='" + instanceName + ".updateSelect()'>";
          checkableColumn = DTColumnBuilder.newColumn('DT_RowId').withOption('name', 'uuid').withTitle(titleHtml).notSortable().renderWith((function(_this) {
            return function(data, type, full, meta) {
              _this.selected[data] = false;
              return "<input type='checkbox' name='id' ng-model='" + instanceName + ".selected[\"" + data + "\"]'>";
            };
          })(this));
          return dtColumns.splice(0, 0, checkableColumn);
        };

        DtTable.prototype.updateSelect = function() {
          var prop, results;
          results = [];
          for (prop in this.selected) {
            results.push(this.selected[prop] = this.selectAll);
          }
          return results;
        };

        DtTable.prototype.clearSelect = function() {
          var prop;
          for (prop in this.selected) {
            this.selected[prop] = false;
          }
          return this.selectAll = false;
        };

        DtTable.prototype.getSelected = function() {
          var checked, ref, results, uuid;
          ref = this.selected;
          results = [];
          for (uuid in ref) {
            checked = ref[uuid];
            if (checked) {
              results.push(uuid);
            }
          }
          return results;
        };

        DtTable.prototype.hasSelectedItems = function() {
          return this.getSelected().length > 0;
        };

        DtTable.prototype.reloadData = function() {
          this.dtInstance.reloadData();
          return this.clearSelect();
        };

        return DtTable;

      })();
      return {
        checkable: function(instanceName, scope, dtOptions, dtColumns, dtInstance) {
          var table;
          table = new DtTable(dtInstance);
          table.init(instanceName, dtOptions, dtColumns, scope);
          return table;
        },
        enableReload: function(scope, dtInstance) {
          var ref;
          scope.dtRefreshPromises = (ref = scope.dtRefreshPromises) != null ? ref : {};
          return scope.$on('dtReload', function() {
            var promise;
            promise = scope.dtRefreshPromises[dtInstance];
            if (promise == null) {
              $timeout.cancel(promise);
            }
            return scope.dtRefreshPromises[dtInstance] = $timeout(function() {
              dtInstance.reloadData();
              return delete scope.dtRefreshPromises[dtInstance];
            }, 100);
          });
        },
        getDefaultOptions: function(ajax, scope) {
          if (!ajax.url.startsWith('web/')) {
            ajax.url = "web/" + ajax.url;
          }
          return DTOptionsBuilder.newOptions().withOption('ajax', ajax).withDataProp('data').withOption('serverSide', true).withOption('processing', true).withOption('headerCallback', function(thead, data, start, end, display) {
            compile(thead, scope);
            return delete scope.dtOptions['headerCallback'];
          }).withOption('createdRow', function(row, data, dataIndex) {
            return compile(row, scope);
          });
        },
        getDataById: function(id, dtInstance) {
          var data, rows;
          rows = (function() {
            var i, len, ref, results;
            ref = dtInstance.getData();
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              data = ref[i];
              if (data['DT_RowId'] === id) {
                results.push(data);
              }
            }
            return results;
          })();
          if (rows.length > 0) {
            return rows[0];
          } else {
            return null;
          }
        },
        descriptionHtml: function(data, type, full, meta) {
          var content;
          content = $filter('limitTo')(data, 20);
          content = (data != null ? data.length : void 0) > 20 ? content + '...' : content != null ? content : '';
          return "<span title='" + data + "'>" + content + "</span>";
        },
        defaultHandle: function(promise, dtInstance, successMessage, errorMessage) {
          return promise.success(function(data, status, headers, config) {
            var ref;
            AlertService.show(data.success, (ref = data.msg) != null ? ref : successMessage);
            return dtInstance.reloadData();
          }).error(function(data, status, headers, config) {
            return AlertService.show(false, data != null ? data : errorMessage);
          });
        }
      };
    }
  ]).service('DialogService', [
    '$modal', 'AlertService', 'DataTableService', function($modal, AlertService, DataTableService) {
      return {
        show: function(options) {
          return $modal.open(options).result.then(function(result) {
            AlertService.show(result.success, result.data, 3000);
            if (result.success) {
              return DataTableService.reloadData();
            }
          }, function() {

            /* cancel */
          });
        }
      };
    }
  ]).service('WebSocketService', [
    '$location', '$rootScope', '$q', function($location, $rootScope, $q) {
      var connect, promise, subscriptions;
      subscriptions = [];
      promise = void 0;
      connect = function(login, password) {
        var client, context, deferred, url;
        deferred = $q.defer();
        context = $("meta[name='context']").attr("content");
        url = "ws://" + ($location.host()) + ":" + ($location.port()) + context + "/web/ws";
        client = Stomp.client(url);
        client.connect({
          login: login,
          passcode: password
        }, function() {
          return deferred.resolve(client);
        }, deferred.reject);
        return deferred.promise;
      };
      return {
        init: function(login, password) {
          promise = connect(login, password);
          return promise.then(function(client) {
            var onNotification;
            onNotification = function(message) {
              return $rootScope.$broadcast(message.body);
            };
            client.subscribe("/user/queue/notification", onNotification);
            return client.subscribe("/topic/notification", onNotification);
          });
        },
        clear: function() {
          var i, len, subscription;
          for (i = 0, len = subscriptions.length; i < len; i++) {
            subscription = subscriptions[i];
            subscription.unsubscribe();
          }
          return subscriptions.length = 0;
        },
        subscribe: function(resourceType, params, callback) {
          return promise.then(function(client) {
            var destination, header, subscription;
            destination = "/user/queue/realtime." + resourceType;
            header = {
              params: JSON.stringify(params)
            };
            subscription = client.subscribe(destination, callback, header);
            return subscriptions.push(subscription);
          });
        }
      };
    }
  ]);

  getCookie = function() {
    var cookieMap;
    cookieMap = {};
    document.cookie.split(';').forEach(function(data) {
      var entry;
      entry = data.trim().split('=');
      return cookieMap[entry[0]] = entry[1];
    });
    return cookieMap;
  };

}).call(this);

//# sourceMappingURL=common.js.map
